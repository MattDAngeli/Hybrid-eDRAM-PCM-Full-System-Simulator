###################### Define CPUs ###################### 
system.membus = SystemXBar()

system.l3bus = L2XBar()
system.l3cache = L3Cache()
system.l3cache.cpu_side = system.l3bus.master
system.l3cache.mem_side = system.membus.slave # LLC to PCM

system.cpu = [DerivO3CPU(cpu_id = i) for i in range(0, np)]
for i in range(0, np):
    system.cpu[i].max_insts_all_threads = MAX_INSTS

    # Setup caches for each CPU
    system.cpu[i].icache = L1ICache()
    system.cpu[i].dcache = L1DCache()

    system.cpu[i].icache_port = system.cpu[i].icache.cpu_side
    system.cpu[i].dcache_port = system.cpu[i].dcache.cpu_side

    system.cpu[i].l2bus = L2XBar()
    
    system.cpu[i].icache.mem_side = system.cpu[i].l2bus.slave
    system.cpu[i].dcache.mem_side = system.cpu[i].l2bus.slave

    system.cpu[i].l2cache = L2Cache()
    system.cpu[i].l2bus.master = system.cpu[i].l2cache.cpu_side

    system.cpu[i].l2cache.mem_side = system.l3bus.slave

    # interrupt controller
    system.cpu[i].createInterruptController()

    # Assign workloads
    system.cpu[i].workload = multiprocesses[i]
    system.cpu[i].createThreads()

# Create a PCM memory system
system.hybrid = HybridController()
system.hybrid.range = system.mem_ranges[0]
system.hybrid.cpu_side_port = system.membus.master

# Connect the system up to the membus
system.system_port = system.membus.slave

# set up the root SimObject and start the simulation
root = Root(full_system = False, system = system)

# instantiate all of the objects we've created above
m5.instantiate()

print("Beginning simulation!")
exit_event = m5.simulate()
print('Exiting @ tick %i because %s' % (m5.curTick(), exit_event.getCause()))
